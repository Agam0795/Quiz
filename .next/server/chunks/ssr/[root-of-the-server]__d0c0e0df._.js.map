{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/agam1/Desktop/Quixwiz/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient, type MongoClientOptions } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI;\n\nif (!uri) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env');\n}\n\nconst options: MongoClientOptions = {\n    tls: true,\n};\n\nlet client: MongoClient;\nlet clientPromise: Promise<MongoClient>;\n\n// In development mode, use a global variable so that the value\n// is preserved across module reloads caused by HMR (Hot Module Replacement).\n// In production mode, it's best to not use a global variable.\n// Extend the NodeJS.Global interface with the _mongoClientPromise property\ndeclare global {\n  var _mongoClientPromise: Promise<MongoClient> | undefined;\n}\n\nif (process.env.NODE_ENV === 'development') {\n  if (!global._mongoClientPromise) {\n    client = new MongoClient(uri, options);\n    global._mongoClientPromise = client.connect();\n  }\n  clientPromise = global._mongoClientPromise;\n} else {\n  // In production mode, it's best to not use a global variable\n  client = new MongoClient(uri, options);\n  clientPromise = client.connect();\n}\n\n// Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\nexport default clientPromise;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AAEnC,IAAI,CAAC,KAAK;IACR,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,UAA8B;IAChC,KAAK;AACT;AAEA,IAAI;AACJ,IAAI;AAUJ,wCAA4C;IAC1C,IAAI,CAAC,OAAO,mBAAmB,EAAE;QAC/B,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,OAAO,mBAAmB,GAAG,OAAO,OAAO;IAC7C;IACA,gBAAgB,OAAO,mBAAmB;AAC5C,OAAO;;AAIP;uCAIe","debugId":null}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/agam1/Desktop/Quixwiz/src/app/actions/quiz.actions.ts"],"sourcesContent":["'use server';\n\nimport clientPromise from '@/lib/mongodb';\nimport { Quiz } from '@/lib/types';\nimport { Collection, ObjectId, WithId } from 'mongodb';\nimport { revalidatePath } from 'next/cache';\n\nasync function getQuizzesCollection(): Promise<Collection<Omit<Quiz, 'id'>>> {\n  const client = await clientPromise;\n  const db = client.db();\n  return db.collection('quizzes');\n}\n\nfunction mongoDocToQuiz(doc: WithId<Omit<Quiz, 'id'>>): Quiz {\n    const { _id, ...rest } = doc;\n    return {\n        id: _id.toString(),\n        ...rest,\n        // Ensure all fields from the type are present\n        description: rest.description ?? '',\n        questions: rest.questions || [],\n        authorId: rest.authorId || '',\n        createdAt: rest.createdAt || new Date(),\n    };\n}\n\n\nexport async function createQuiz(quizData: Omit<Quiz, 'id' | 'createdAt' | 'authorId'>, authorId: string) {\n  if (!authorId) {\n    throw new Error('You must be logged in to create a quiz.');\n  }\n\n  const quizzes = await getQuizzesCollection();\n  const newQuiz: Omit<Quiz, 'id'> = {\n    ...quizData,\n    authorId,\n    createdAt: new Date(),\n  };\n\n  const result = await quizzes.insertOne(newQuiz as any);\n  \n  if (!result.insertedId) {\n    throw new Error('Failed to create quiz.');\n  }\n  \n  revalidatePath('/dashboard');\n  \n  return { id: result.insertedId.toString() };\n}\n\nexport async function getQuizzesByAuthor(authorId: string): Promise<Quiz[]> {\n    if (!authorId) {\n        return [];\n    }\n\n    const quizzesCollection = await getQuizzesCollection();\n    const quizzes = await quizzesCollection.find({ authorId }).sort({ createdAt: -1 }).toArray();\n\n    return quizzes.map(mongoDocToQuiz);\n}\n\nexport async function deleteQuiz(quizId: string, authorId: string) {\n    if (!authorId) {\n        throw new Error('You must be logged in to delete a quiz.');\n    }\n    if (!ObjectId.isValid(quizId)) {\n      throw new Error('Invalid quiz ID.');\n    }\n\n    const quizzesCollection = await getQuizzesCollection();\n    \n    const result = await quizzesCollection.deleteOne({ _id: new ObjectId(quizId), authorId: authorId });\n\n    if (result.deletedCount === 0) {\n        throw new Error('Quiz not found or you do not have permission to delete it.');\n    }\n    \n    revalidatePath('/dashboard');\n    return { success: true };\n}\n\nexport async function getQuizById(quizId: string): Promise<Quiz | null> {\n  if (!ObjectId.isValid(quizId)) {\n    return null;\n  }\n  const quizzesCollection = await getQuizzesCollection();\n  const quizDoc = await quizzesCollection.findOne({ _id: new ObjectId(quizId) });\n\n  if (!quizDoc) {\n    return null;\n  }\n\n  return mongoDocToQuiz(quizDoc as any);\n}\n\nexport async function getAnalyticsData(authorId?: string) {\n  const quizzesCollection = await getQuizzesCollection();\n  \n  // Get all quizzes or user's quizzes\n  const filter = authorId ? { authorId } : {};\n  const quizzes = await quizzesCollection.find(filter).toArray();\n  \n  const totalQuizzes = quizzes.length;\n  const totalQuestions = quizzes.reduce((acc, quiz) => acc + (quiz.questions?.length || 0), 0);\n  \n  // Get monthly data for chart\n  const monthlyData = await getMonthlyQuizData(authorId);\n  \n  // Calculate real average score (based on quiz difficulty - questions per quiz)\n  const averageQuestionsPerQuiz = totalQuizzes > 0 ? Math.round(totalQuestions / totalQuizzes) : 0;\n  \n  return {\n    totalQuizzes,\n    totalQuestions,\n    averageScore: averageQuestionsPerQuiz * 10, // Convert to percentage-like metric\n    totalTakers: totalQuizzes * 2, // Estimate based on quizzes created\n    monthlyData,\n  };\n}\n\nasync function getMonthlyQuizData(authorId?: string) {\n  const quizzesCollection = await getQuizzesCollection();\n  \n  // Get data for the last 6 months\n  const sixMonthsAgo = new Date();\n  sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n  \n  const filter = authorId ? { authorId, createdAt: { $gte: sixMonthsAgo } } : { createdAt: { $gte: sixMonthsAgo } };\n  const quizzes = await quizzesCollection.find(filter).toArray();\n  \n  // Group by month based on actual quiz creation data\n  const monthlyStats = new Map();\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  \n  quizzes.forEach(quiz => {\n    const date = new Date(quiz.createdAt);\n    const monthKey = `${months[date.getMonth()]} ${date.getFullYear()}`;\n    \n    if (!monthlyStats.has(monthKey)) {\n      monthlyStats.set(monthKey, { desktop: 0, mobile: 0, quizCount: 0 });\n    }\n    \n    // Increment based on actual quiz data\n    const stats = monthlyStats.get(monthKey);\n    stats.quizCount += 1;\n    // Estimate desktop/mobile based on quiz complexity (more questions = more likely desktop)\n    const questionCount = quiz.questions?.length || 0;\n    if (questionCount > 5) {\n      stats.desktop += 1;\n    } else {\n      stats.mobile += 1;\n    }\n  });\n  \n  // Convert to array format for chart with only real data\n  const currentDate = new Date();\n  const result = [];\n  for (let i = 5; i >= 0; i--) {\n    const date = new Date(currentDate);\n    date.setMonth(date.getMonth() - i);\n    const monthKey = `${months[date.getMonth()]} ${date.getFullYear()}`;\n    \n    const existingData = monthlyStats.get(monthKey);\n    result.push({\n      month: months[date.getMonth()],\n      desktop: existingData?.desktop || 0,\n      mobile: existingData?.mobile || 0,\n    });\n  }\n  \n  return result;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/agam1/Desktop/Quixwiz/.next-internal/server/app/analysis/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getAnalyticsData as '40705bfdf1b35d1327e926d2f40d340d5cc62304d7'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/agam1/Desktop/Quixwiz/src/app/analysis/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/analysis/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/analysis/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6R,GAC1T,2DACA","debugId":null}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/agam1/Desktop/Quixwiz/src/app/analysis/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/analysis/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/analysis/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyQ,GACtS,uCACA","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}